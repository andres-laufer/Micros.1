

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sun Apr 18 20:03:03 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209                           
   210                           	psect	nvCOMMON
   211  0079                     __pnvCOMMON:
   212  0079                     _Minus_cent:
   213  0079                     	ds	1
   214                           
   215                           	psect	nvBANK0
   216  002C                     __pnvBANK0:
   217  002C                     _unit:
   218  002C                     	ds	1
   219  002D                     _dec:
   220  002D                     	ds	1
   221  002E                     _cent:
   222  002E                     	ds	1
   223  0006                     _PORTB	set	6
   224  0008                     _PORTDbits	set	8
   225  0007                     _PORTC	set	7
   226  0008                     _PORTD	set	8
   227  0001                     _TMR0	set	1
   228  000B                     _INTCONbits	set	11
   229  0005                     _PORTA	set	5
   230  0006                     _PORTBbits	set	6
   231  005A                     _T0IF	set	90
   232  0058                     _RBIF	set	88
   233  0096                     _IOCBbits	set	150
   234  0095                     _WPUBbits	set	149
   235  0081                     _OPTION_REGbits	set	129
   236  0088                     _TRISD	set	136
   237  0087                     _TRISC	set	135
   238  0085                     _TRISA	set	133
   239  0086                     _TRISB	set	134
   240  008F                     _OSCCONbits	set	143
   241  0188                     _ANSEL	set	392
   242  0189                     _ANSELH	set	393
   243                           
   244                           	psect	cinit
   245  0011                     start_initialization:	
   246                           ; #config settings
   247                           
   248  0011                     __initialization:
   249                           
   250                           ; Clear objects allocated to COMMON
   251  0011  01F5               	clrf	__pbssCOMMON& (0+127)
   252  0012  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   253  0013  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   254  0014  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   255  0015                     end_of_initialization:	
   256                           ;End of C runtime variable initialization code
   257                           
   258  0015                     __end_of__initialization:
   259  0015  0183               	clrf	3
   260  0016  120A  118A  2819   	ljmp	_main	;jump to C main() function
   261                           
   262                           	psect	bssCOMMON
   263  0075                     __pbssCOMMON:
   264  0075                     _display_var:
   265  0075                     	ds	3
   266  0078                     _Disp_Sig:
   267  0078                     	ds	1
   268                           
   269                           	psect	cstackCOMMON
   270  0070                     __pcstackCOMMON:
   271  0070                     ?_tabla_seg:
   272  0070                     ?_ISR:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ??_ISR:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_main:	
   279                           ; 1 bytes @ 0x0
   280                           
   281                           
   282                           ; 1 bytes @ 0x0
   283  0070                     	ds	5
   284                           
   285                           	psect	cstackBANK0
   286  0020                     __pcstackBANK0:
   287  0020                     ??_tabla_seg:
   288  0020                     ?___awdiv:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0020                     ?___awmod:	
   292                           ; 2 bytes @ 0x0
   293                           
   294  0020                     ___awdiv@divisor:	
   295                           ; 2 bytes @ 0x0
   296                           
   297  0020                     ___awmod@divisor:	
   298                           ; 2 bytes @ 0x0
   299                           
   300                           
   301                           ; 2 bytes @ 0x0
   302  0020                     	ds	2
   303  0022                     tabla_seg@valor:
   304  0022                     ___awdiv@dividend:	
   305                           ; 1 bytes @ 0x2
   306                           
   307  0022                     ___awmod@dividend:	
   308                           ; 2 bytes @ 0x2
   309                           
   310                           
   311                           ; 2 bytes @ 0x2
   312  0022                     	ds	2
   313  0024                     ??___awdiv:
   314  0024                     ??___awmod:	
   315                           ; 1 bytes @ 0x4
   316                           
   317                           
   318                           ; 1 bytes @ 0x4
   319  0024                     	ds	1
   320  0025                     ___awdiv@counter:
   321  0025                     ___awmod@counter:	
   322                           ; 1 bytes @ 0x5
   323                           
   324                           
   325                           ; 1 bytes @ 0x5
   326  0025                     	ds	1
   327  0026                     ___awdiv@sign:
   328  0026                     ___awmod@sign:	
   329                           ; 1 bytes @ 0x6
   330                           
   331                           
   332                           ; 1 bytes @ 0x6
   333  0026                     	ds	1
   334  0027                     ___awdiv@quotient:
   335                           
   336                           ; 2 bytes @ 0x7
   337  0027                     	ds	2
   338  0029                     ??_main:
   339                           
   340                           ; 1 bytes @ 0x9
   341  0029                     	ds	3
   342                           
   343                           	psect	maintext
   344  0019                     __pmaintext:	
   345 ;;
   346 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   347 ;;
   348 ;; *************** function _main *****************
   349 ;; Defined at:
   350 ;;		line 144 in file "main.c"
   351 ;; Parameters:    Size  Location     Type
   352 ;;		None
   353 ;; Auto vars:     Size  Location     Type
   354 ;;		None
   355 ;; Return value:  Size  Location     Type
   356 ;;                  1    wreg      void 
   357 ;; Registers used:
   358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   359 ;; Tracked objects:
   360 ;;		On entry : B00/0
   361 ;;		On exit  : 0/0
   362 ;;		Unchanged: 0/0
   363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   364 ;;      Params:         0       0       0       0       0
   365 ;;      Locals:         0       0       0       0       0
   366 ;;      Temps:          0       3       0       0       0
   367 ;;      Totals:         0       3       0       0       0
   368 ;;Total ram usage:        3 bytes
   369 ;; Hardware stack levels required when called:    2
   370 ;; This function calls:
   371 ;;		___awdiv
   372 ;;		___awmod
   373 ;;		_tabla_seg
   374 ;; This function is called by:
   375 ;;		Startup code after reset
   376 ;; This function uses a non-reentrant model
   377 ;;
   378                           
   379                           
   380                           ;psect for function _main
   381  0019                     _main:
   382  0019                     l1529:	
   383                           ;incstack = 0
   384                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   385                           
   386                           
   387                           ;main.c: 147:     OSCCONbits.IRCF2 = 1;
   388  0019  1683               	bsf	3,5	;RP0=1, select bank1
   389  001A  1303               	bcf	3,6	;RP1=0, select bank1
   390  001B  170F               	bsf	15,6	;volatile
   391                           
   392                           ;main.c: 148:     OSCCONbits.IRCF1 = 0;
   393  001C  128F               	bcf	15,5	;volatile
   394                           
   395                           ;main.c: 149:     OSCCONbits.IRCF0 = 0;
   396  001D  120F               	bcf	15,4	;volatile
   397                           
   398                           ;main.c: 150:     OSCCONbits.SCS = 1;
   399  001E  140F               	bsf	15,0	;volatile
   400  001F                     l1531:
   401                           
   402                           ;main.c: 152:     ANSELH = 0;
   403  001F  1683               	bsf	3,5	;RP0=1, select bank3
   404  0020  1703               	bsf	3,6	;RP1=1, select bank3
   405  0021  0189               	clrf	9	;volatile
   406                           
   407                           ;main.c: 153:     ANSEL = 0;
   408  0022  0188               	clrf	8	;volatile
   409  0023                     l1533:
   410                           
   411                           ;main.c: 154:     TRISB = 3;
   412  0023  3003               	movlw	3
   413  0024  1683               	bsf	3,5	;RP0=1, select bank1
   414  0025  1303               	bcf	3,6	;RP1=0, select bank1
   415  0026  0086               	movwf	6	;volatile
   416  0027                     l1535:
   417                           
   418                           ;main.c: 155:     TRISA = 0;
   419  0027  0185               	clrf	5	;volatile
   420  0028                     l1537:
   421                           
   422                           ;main.c: 156:     TRISC = 0;
   423  0028  0187               	clrf	7	;volatile
   424  0029                     l1539:
   425                           
   426                           ;main.c: 157:     TRISD = 0;
   427  0029  0188               	clrf	8	;volatile
   428  002A                     l1541:
   429                           
   430                           ;main.c: 158:     OPTION_REGbits.nRBPU = 0;
   431  002A  1381               	bcf	1,7	;volatile
   432  002B                     l1543:
   433                           
   434                           ;main.c: 159:     WPUBbits.WPUB0 = 1;
   435  002B  1415               	bsf	21,0	;volatile
   436  002C                     l1545:
   437                           
   438                           ;main.c: 160:     WPUBbits.WPUB1 = 1;
   439  002C  1495               	bsf	21,1	;volatile
   440  002D                     l1547:
   441                           
   442                           ;main.c: 161:     PORTA = 0;
   443  002D  1283               	bcf	3,5	;RP0=0, select bank0
   444  002E  1303               	bcf	3,6	;RP1=0, select bank0
   445  002F  0185               	clrf	5	;volatile
   446  0030                     l1549:
   447                           
   448                           ;main.c: 162:     PORTB = 0;
   449  0030  0186               	clrf	6	;volatile
   450  0031                     l1551:
   451                           
   452                           ;main.c: 163:     PORTC = 0;
   453  0031  0187               	clrf	7	;volatile
   454  0032                     l1553:
   455                           
   456                           ;main.c: 164:     PORTD = 0;
   457  0032  0188               	clrf	8	;volatile
   458  0033                     l1555:
   459                           
   460                           ;main.c: 167:     IOCBbits.IOCB0 = 1;
   461  0033  1683               	bsf	3,5	;RP0=1, select bank1
   462  0034  1303               	bcf	3,6	;RP1=0, select bank1
   463  0035  1416               	bsf	22,0	;volatile
   464  0036                     l1557:
   465                           
   466                           ;main.c: 168:     IOCBbits.IOCB1 = 1;
   467  0036  1496               	bsf	22,1	;volatile
   468  0037                     l1559:
   469                           
   470                           ;main.c: 171:     OPTION_REGbits.T0CS = 0;
   471  0037  1281               	bcf	1,5	;volatile
   472  0038                     l1561:
   473                           
   474                           ;main.c: 172:     OPTION_REGbits.PSA = 0;
   475  0038  1181               	bcf	1,3	;volatile
   476  0039                     l1563:
   477                           
   478                           ;main.c: 173:     OPTION_REGbits.PS2 = 0;
   479  0039  1101               	bcf	1,2	;volatile
   480  003A                     l1565:
   481                           
   482                           ;main.c: 174:     OPTION_REGbits.PS1 = 1;
   483  003A  1481               	bsf	1,1	;volatile
   484  003B                     l1567:
   485                           
   486                           ;main.c: 175:     OPTION_REGbits.PS0 = 1;
   487  003B  1401               	bsf	1,0	;volatile
   488                           
   489                           ;main.c: 176:     TMR0 = 100;
   490  003C  3064               	movlw	100
   491  003D  1283               	bcf	3,5	;RP0=0, select bank0
   492  003E  1303               	bcf	3,6	;RP1=0, select bank0
   493  003F  0081               	movwf	1	;volatile
   494  0040                     l1569:
   495                           
   496                           ;main.c: 177:     INTCONbits.T0IF = 0;
   497  0040  110B               	bcf	11,2	;volatile
   498  0041                     l1571:
   499                           
   500                           ;main.c: 180:     INTCONbits.GIE = 1;
   501  0041  178B               	bsf	11,7	;volatile
   502  0042                     l1573:
   503                           
   504                           ;main.c: 181:     INTCONbits.RBIE = 1;
   505  0042  158B               	bsf	11,3	;volatile
   506  0043                     l1575:
   507                           
   508                           ;main.c: 182:     INTCONbits.T0IE = 1;
   509  0043  168B               	bsf	11,5	;volatile
   510  0044                     l1577:
   511                           
   512                           ;main.c: 187:     {;main.c: 188:         cent = PORTA / 100;
   513  0044  3064               	movlw	100
   514  0045  00A0               	movwf	___awdiv@divisor
   515  0046  3000               	movlw	0
   516  0047  00A1               	movwf	___awdiv@divisor+1
   517  0048  0805               	movf	5,w	;volatile
   518  0049  00A9               	movwf	??_main
   519  004A  01AA               	clrf	??_main+1
   520  004B  0829               	movf	??_main,w
   521  004C  00A2               	movwf	___awdiv@dividend
   522  004D  082A               	movf	??_main+1,w
   523  004E  00A3               	movwf	___awdiv@dividend+1
   524  004F  120A  118A  20C1  120A  118A  	fcall	___awdiv
   525  0054  1283               	bcf	3,5	;RP0=0, select bank0
   526  0055  1303               	bcf	3,6	;RP1=0, select bank0
   527  0056  0820               	movf	?___awdiv,w
   528  0057  00AB               	movwf	??_main+2
   529  0058  082B               	movf	??_main+2,w
   530  0059  00AE               	movwf	_cent
   531  005A                     l1579:
   532                           
   533                           ;main.c: 189:         Minus_cent = PORTA % 100;
   534  005A  3064               	movlw	100
   535  005B  00A0               	movwf	___awmod@divisor
   536  005C  3000               	movlw	0
   537  005D  00A1               	movwf	___awmod@divisor+1
   538  005E  0805               	movf	5,w	;volatile
   539  005F  00A9               	movwf	??_main
   540  0060  01AA               	clrf	??_main+1
   541  0061  0829               	movf	??_main,w
   542  0062  00A2               	movwf	___awmod@dividend
   543  0063  082A               	movf	??_main+1,w
   544  0064  00A3               	movwf	___awmod@dividend+1
   545  0065  120A  118A  2189  120A  118A  	fcall	___awmod
   546  006A  1283               	bcf	3,5	;RP0=0, select bank0
   547  006B  1303               	bcf	3,6	;RP1=0, select bank0
   548  006C  0820               	movf	?___awmod,w
   549  006D  00AB               	movwf	??_main+2
   550  006E  082B               	movf	??_main+2,w
   551  006F  00F9               	movwf	_Minus_cent
   552  0070                     l1581:
   553                           
   554                           ;main.c: 190:         dec = Minus_cent / 10;
   555  0070  300A               	movlw	10
   556  0071  00A0               	movwf	___awdiv@divisor
   557  0072  3000               	movlw	0
   558  0073  00A1               	movwf	___awdiv@divisor+1
   559  0074  0879               	movf	_Minus_cent,w
   560  0075  00A9               	movwf	??_main
   561  0076  01AA               	clrf	??_main+1
   562  0077  0829               	movf	??_main,w
   563  0078  00A2               	movwf	___awdiv@dividend
   564  0079  082A               	movf	??_main+1,w
   565  007A  00A3               	movwf	___awdiv@dividend+1
   566  007B  120A  118A  20C1  120A  118A  	fcall	___awdiv
   567  0080  1283               	bcf	3,5	;RP0=0, select bank0
   568  0081  1303               	bcf	3,6	;RP1=0, select bank0
   569  0082  0820               	movf	?___awdiv,w
   570  0083  00AB               	movwf	??_main+2
   571  0084  082B               	movf	??_main+2,w
   572  0085  00AD               	movwf	_dec
   573  0086                     l1583:
   574                           
   575                           ;main.c: 191:         unit = Minus_cent % 10;
   576  0086  300A               	movlw	10
   577  0087  00A0               	movwf	___awmod@divisor
   578  0088  3000               	movlw	0
   579  0089  00A1               	movwf	___awmod@divisor+1
   580  008A  0879               	movf	_Minus_cent,w
   581  008B  00A9               	movwf	??_main
   582  008C  01AA               	clrf	??_main+1
   583  008D  0829               	movf	??_main,w
   584  008E  00A2               	movwf	___awmod@dividend
   585  008F  082A               	movf	??_main+1,w
   586  0090  00A3               	movwf	___awmod@dividend+1
   587  0091  120A  118A  2189  120A  118A  	fcall	___awmod
   588  0096  1283               	bcf	3,5	;RP0=0, select bank0
   589  0097  1303               	bcf	3,6	;RP1=0, select bank0
   590  0098  0820               	movf	?___awmod,w
   591  0099  00AB               	movwf	??_main+2
   592  009A  082B               	movf	??_main+2,w
   593  009B  00AC               	movwf	_unit
   594  009C                     l1585:
   595                           
   596                           ;main.c: 193:         display_var[2] = tabla_seg(cent);
   597  009C  082E               	movf	_cent,w
   598  009D  120A  118A  212A  120A  118A  	fcall	_tabla_seg
   599  00A2  1283               	bcf	3,5	;RP0=0, select bank0
   600  00A3  1303               	bcf	3,6	;RP1=0, select bank0
   601  00A4  00A9               	movwf	??_main
   602  00A5  0829               	movf	??_main,w
   603  00A6  00F7               	movwf	_display_var+2
   604  00A7                     l1587:
   605                           
   606                           ;main.c: 194:         display_var[1] = tabla_seg(dec);
   607  00A7  082D               	movf	_dec,w
   608  00A8  120A  118A  212A  120A  118A  	fcall	_tabla_seg
   609  00AD  1283               	bcf	3,5	;RP0=0, select bank0
   610  00AE  1303               	bcf	3,6	;RP1=0, select bank0
   611  00AF  00A9               	movwf	??_main
   612  00B0  0829               	movf	??_main,w
   613  00B1  00F6               	movwf	_display_var+1
   614  00B2                     l1589:
   615                           
   616                           ;main.c: 195:         display_var[0] = tabla_seg(unit);
   617  00B2  082C               	movf	_unit,w
   618  00B3  120A  118A  212A  120A  118A  	fcall	_tabla_seg
   619  00B8  1283               	bcf	3,5	;RP0=0, select bank0
   620  00B9  1303               	bcf	3,6	;RP1=0, select bank0
   621  00BA  00A9               	movwf	??_main
   622  00BB  0829               	movf	??_main,w
   623  00BC  00F5               	movwf	_display_var
   624  00BD  2844               	goto	l1577
   625  00BE  120A  118A  280E   	ljmp	start
   626  00C1                     __end_of_main:
   627                           
   628                           	psect	text1
   629  012A                     __ptext1:	
   630 ;; *************** function _tabla_seg *****************
   631 ;; Defined at:
   632 ;;		line 45 in file "main.c"
   633 ;; Parameters:    Size  Location     Type
   634 ;;  valor           1    wreg     unsigned char 
   635 ;; Auto vars:     Size  Location     Type
   636 ;;  valor           1    2[BANK0 ] unsigned char 
   637 ;; Return value:  Size  Location     Type
   638 ;;                  1    wreg      unsigned char 
   639 ;; Registers used:
   640 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   646 ;;      Params:         0       0       0       0       0
   647 ;;      Locals:         0       1       0       0       0
   648 ;;      Temps:          0       2       0       0       0
   649 ;;      Totals:         0       3       0       0       0
   650 ;;Total ram usage:        3 bytes
   651 ;; Hardware stack levels used:    1
   652 ;; Hardware stack levels required when called:    1
   653 ;; This function calls:
   654 ;;		Nothing
   655 ;; This function is called by:
   656 ;;		_main
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           
   661                           ;psect for function _tabla_seg
   662  012A                     _tabla_seg:
   663                           
   664                           ;incstack = 0
   665                           ; Regs used in _tabla_seg: [wreg-fsr0h+status,2+status,0]
   666                           ;tabla_seg@valor stored from wreg
   667  012A  1283               	bcf	3,5	;RP0=0, select bank0
   668  012B  1303               	bcf	3,6	;RP1=0, select bank0
   669  012C  00A2               	movwf	tabla_seg@valor
   670  012D                     l1339:
   671                           
   672                           ;main.c: 46:     switch(valor) {
   673  012D  294E               	goto	l1439
   674  012E                     l1341:
   675                           
   676                           ;main.c: 48:             return 0x3F;
   677  012E  303F               	movlw	63
   678  012F  2988               	goto	l57
   679  0130                     l1347:
   680                           
   681                           ;main.c: 51:             return 0x06;
   682  0130  3006               	movlw	6
   683  0131  2988               	goto	l57
   684  0132                     l1353:
   685                           
   686                           ;main.c: 54:             return 0x5B;
   687  0132  305B               	movlw	91
   688  0133  2988               	goto	l57
   689  0134                     l1359:
   690                           
   691                           ;main.c: 57:             return 0x4F;
   692  0134  304F               	movlw	79
   693  0135  2988               	goto	l57
   694  0136                     l1365:
   695                           
   696                           ;main.c: 60:             return 0x66;
   697  0136  3066               	movlw	102
   698  0137  2988               	goto	l57
   699  0138                     l1371:
   700                           
   701                           ;main.c: 63:             return 0x6D;
   702  0138  306D               	movlw	109
   703  0139  2988               	goto	l57
   704  013A                     l1377:
   705                           
   706                           ;main.c: 66:             return 0x7D;
   707  013A  307D               	movlw	125
   708  013B  2988               	goto	l57
   709  013C                     l1383:
   710                           
   711                           ;main.c: 69:             return 0x07;
   712  013C  3007               	movlw	7
   713  013D  2988               	goto	l57
   714  013E                     l1389:
   715                           
   716                           ;main.c: 72:             return 0x7F;
   717  013E  307F               	movlw	127
   718  013F  2988               	goto	l57
   719  0140                     l1395:
   720                           
   721                           ;main.c: 75:             return 0x6F;
   722  0140  306F               	movlw	111
   723  0141  2988               	goto	l57
   724  0142                     l1401:
   725                           
   726                           ;main.c: 78:             return 0x77;
   727  0142  3077               	movlw	119
   728  0143  2988               	goto	l57
   729  0144                     l1407:
   730                           
   731                           ;main.c: 81:             return 0x7C;
   732  0144  307C               	movlw	124
   733  0145  2988               	goto	l57
   734  0146                     l1413:
   735                           
   736                           ;main.c: 84:             return 0x39;
   737  0146  3039               	movlw	57
   738  0147  2988               	goto	l57
   739  0148                     l1419:
   740                           
   741                           ;main.c: 87:             return 0x5E;
   742  0148  305E               	movlw	94
   743  0149  2988               	goto	l57
   744  014A                     l1425:
   745                           
   746                           ;main.c: 90:             return 0x79;
   747  014A  3079               	movlw	121
   748  014B  2988               	goto	l57
   749  014C                     l1431:
   750                           
   751                           ;main.c: 93:             return 0x71;
   752  014C  3071               	movlw	113
   753  014D  2988               	goto	l57
   754  014E                     l1439:
   755  014E  0822               	movf	tabla_seg@valor,w
   756  014F  00A0               	movwf	??_tabla_seg
   757  0150  01A1               	clrf	??_tabla_seg+1
   758                           
   759                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   760                           ; Switch size 1, requested type "simple"
   761                           ; Number of cases is 1, Range of values is 0 to 0
   762                           ; switch strategies available:
   763                           ; Name         Instructions Cycles
   764                           ; simple_byte            4     3 (average)
   765                           ; direct_byte           11     8 (fixed)
   766                           ; jumptable            260     6 (fixed)
   767                           ;	Chosen strategy is simple_byte
   768  0151  0821               	movf	??_tabla_seg+1,w
   769  0152  3A00               	xorlw	0	; case 0
   770  0153  1903               	skipnz
   771  0154  2956               	goto	l1651
   772  0155  2988               	goto	l57
   773  0156                     l1651:
   774                           
   775                           ; Switch size 1, requested type "simple"
   776                           ; Number of cases is 16, Range of values is 0 to 15
   777                           ; switch strategies available:
   778                           ; Name         Instructions Cycles
   779                           ; simple_byte           49    25 (average)
   780                           ; direct_byte           56     8 (fixed)
   781                           ; jumptable            260     6 (fixed)
   782                           ;	Chosen strategy is simple_byte
   783  0156  0820               	movf	??_tabla_seg,w
   784  0157  3A00               	xorlw	0	; case 0
   785  0158  1903               	skipnz
   786  0159  292E               	goto	l1341
   787  015A  3A01               	xorlw	1	; case 1
   788  015B  1903               	skipnz
   789  015C  2930               	goto	l1347
   790  015D  3A03               	xorlw	3	; case 2
   791  015E  1903               	skipnz
   792  015F  2932               	goto	l1353
   793  0160  3A01               	xorlw	1	; case 3
   794  0161  1903               	skipnz
   795  0162  2934               	goto	l1359
   796  0163  3A07               	xorlw	7	; case 4
   797  0164  1903               	skipnz
   798  0165  2936               	goto	l1365
   799  0166  3A01               	xorlw	1	; case 5
   800  0167  1903               	skipnz
   801  0168  2938               	goto	l1371
   802  0169  3A03               	xorlw	3	; case 6
   803  016A  1903               	skipnz
   804  016B  293A               	goto	l1377
   805  016C  3A01               	xorlw	1	; case 7
   806  016D  1903               	skipnz
   807  016E  293C               	goto	l1383
   808  016F  3A0F               	xorlw	15	; case 8
   809  0170  1903               	skipnz
   810  0171  293E               	goto	l1389
   811  0172  3A01               	xorlw	1	; case 9
   812  0173  1903               	skipnz
   813  0174  2940               	goto	l1395
   814  0175  3A03               	xorlw	3	; case 10
   815  0176  1903               	skipnz
   816  0177  2942               	goto	l1401
   817  0178  3A01               	xorlw	1	; case 11
   818  0179  1903               	skipnz
   819  017A  2944               	goto	l1407
   820  017B  3A07               	xorlw	7	; case 12
   821  017C  1903               	skipnz
   822  017D  2946               	goto	l1413
   823  017E  3A01               	xorlw	1	; case 13
   824  017F  1903               	skipnz
   825  0180  2948               	goto	l1419
   826  0181  3A03               	xorlw	3	; case 14
   827  0182  1903               	skipnz
   828  0183  294A               	goto	l1425
   829  0184  3A01               	xorlw	1	; case 15
   830  0185  1903               	skipnz
   831  0186  294C               	goto	l1431
   832  0187  2988               	goto	l57
   833  0188                     l57:
   834  0188  0008               	return
   835  0189                     __end_of_tabla_seg:
   836                           
   837                           	psect	text2
   838  0189                     __ptext2:	
   839 ;; *************** function ___awmod *****************
   840 ;; Defined at:
   841 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awmod.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;  divisor         2    0[BANK0 ] int 
   844 ;;  dividend        2    2[BANK0 ] int 
   845 ;; Auto vars:     Size  Location     Type
   846 ;;  sign            1    6[BANK0 ] unsigned char 
   847 ;;  counter         1    5[BANK0 ] unsigned char 
   848 ;; Return value:  Size  Location     Type
   849 ;;                  2    0[BANK0 ] int 
   850 ;; Registers used:
   851 ;;		wreg, status,2, status,0
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   857 ;;      Params:         0       4       0       0       0
   858 ;;      Locals:         0       2       0       0       0
   859 ;;      Temps:          0       1       0       0       0
   860 ;;      Totals:         0       7       0       0       0
   861 ;;Total ram usage:        7 bytes
   862 ;; Hardware stack levels used:    1
   863 ;; Hardware stack levels required when called:    1
   864 ;; This function calls:
   865 ;;		Nothing
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           
   872                           ;psect for function ___awmod
   873  0189                     ___awmod:
   874  0189                     l1491:	
   875                           ;incstack = 0
   876                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   877                           
   878  0189  1283               	bcf	3,5	;RP0=0, select bank0
   879  018A  1303               	bcf	3,6	;RP1=0, select bank0
   880  018B  01A6               	clrf	___awmod@sign
   881  018C                     l1493:
   882  018C  1FA3               	btfss	___awmod@dividend+1,7
   883  018D  298F               	goto	u531
   884  018E  2990               	goto	u530
   885  018F                     u531:
   886  018F  2997               	goto	l1499
   887  0190                     u530:
   888  0190                     l1495:
   889  0190  09A2               	comf	___awmod@dividend,f
   890  0191  09A3               	comf	___awmod@dividend+1,f
   891  0192  0AA2               	incf	___awmod@dividend,f
   892  0193  1903               	skipnz
   893  0194  0AA3               	incf	___awmod@dividend+1,f
   894  0195                     l1497:
   895  0195  01A6               	clrf	___awmod@sign
   896  0196  0AA6               	incf	___awmod@sign,f
   897  0197                     l1499:
   898  0197  1FA1               	btfss	___awmod@divisor+1,7
   899  0198  299A               	goto	u541
   900  0199  299B               	goto	u540
   901  019A                     u541:
   902  019A  29A0               	goto	l1503
   903  019B                     u540:
   904  019B                     l1501:
   905  019B  09A0               	comf	___awmod@divisor,f
   906  019C  09A1               	comf	___awmod@divisor+1,f
   907  019D  0AA0               	incf	___awmod@divisor,f
   908  019E  1903               	skipnz
   909  019F  0AA1               	incf	___awmod@divisor+1,f
   910  01A0                     l1503:
   911  01A0  0820               	movf	___awmod@divisor,w
   912  01A1  0421               	iorwf	___awmod@divisor+1,w
   913  01A2  1903               	btfsc	3,2
   914  01A3  29A5               	goto	u551
   915  01A4  29A6               	goto	u550
   916  01A5                     u551:
   917  01A5  29D5               	goto	l1521
   918  01A6                     u550:
   919  01A6                     l1505:
   920  01A6  01A5               	clrf	___awmod@counter
   921  01A7  0AA5               	incf	___awmod@counter,f
   922  01A8  29B4               	goto	l1511
   923  01A9                     l1507:
   924  01A9  3001               	movlw	1
   925  01AA                     u565:
   926  01AA  1003               	clrc
   927  01AB  0DA0               	rlf	___awmod@divisor,f
   928  01AC  0DA1               	rlf	___awmod@divisor+1,f
   929  01AD  3EFF               	addlw	-1
   930  01AE  1D03               	skipz
   931  01AF  29AA               	goto	u565
   932  01B0                     l1509:
   933  01B0  3001               	movlw	1
   934  01B1  00A4               	movwf	??___awmod
   935  01B2  0824               	movf	??___awmod,w
   936  01B3  07A5               	addwf	___awmod@counter,f
   937  01B4                     l1511:
   938  01B4  1FA1               	btfss	___awmod@divisor+1,7
   939  01B5  29B7               	goto	u571
   940  01B6  29B8               	goto	u570
   941  01B7                     u571:
   942  01B7  29A9               	goto	l1507
   943  01B8                     u570:
   944  01B8                     l1513:
   945  01B8  0821               	movf	___awmod@divisor+1,w
   946  01B9  0223               	subwf	___awmod@dividend+1,w
   947  01BA  1D03               	skipz
   948  01BB  29BE               	goto	u585
   949  01BC  0820               	movf	___awmod@divisor,w
   950  01BD  0222               	subwf	___awmod@dividend,w
   951  01BE                     u585:
   952  01BE  1C03               	skipc
   953  01BF  29C1               	goto	u581
   954  01C0  29C2               	goto	u580
   955  01C1                     u581:
   956  01C1  29C8               	goto	l1517
   957  01C2                     u580:
   958  01C2                     l1515:
   959  01C2  0820               	movf	___awmod@divisor,w
   960  01C3  02A2               	subwf	___awmod@dividend,f
   961  01C4  0821               	movf	___awmod@divisor+1,w
   962  01C5  1C03               	skipc
   963  01C6  03A3               	decf	___awmod@dividend+1,f
   964  01C7  02A3               	subwf	___awmod@dividend+1,f
   965  01C8                     l1517:
   966  01C8  3001               	movlw	1
   967  01C9                     u595:
   968  01C9  1003               	clrc
   969  01CA  0CA1               	rrf	___awmod@divisor+1,f
   970  01CB  0CA0               	rrf	___awmod@divisor,f
   971  01CC  3EFF               	addlw	-1
   972  01CD  1D03               	skipz
   973  01CE  29C9               	goto	u595
   974  01CF                     l1519:
   975  01CF  3001               	movlw	1
   976  01D0  02A5               	subwf	___awmod@counter,f
   977  01D1  1D03               	btfss	3,2
   978  01D2  29D4               	goto	u601
   979  01D3  29D5               	goto	u600
   980  01D4                     u601:
   981  01D4  29B8               	goto	l1513
   982  01D5                     u600:
   983  01D5                     l1521:
   984  01D5  0826               	movf	___awmod@sign,w
   985  01D6  1903               	btfsc	3,2
   986  01D7  29D9               	goto	u611
   987  01D8  29DA               	goto	u610
   988  01D9                     u611:
   989  01D9  29DF               	goto	l1525
   990  01DA                     u610:
   991  01DA                     l1523:
   992  01DA  09A2               	comf	___awmod@dividend,f
   993  01DB  09A3               	comf	___awmod@dividend+1,f
   994  01DC  0AA2               	incf	___awmod@dividend,f
   995  01DD  1903               	skipnz
   996  01DE  0AA3               	incf	___awmod@dividend+1,f
   997  01DF                     l1525:
   998  01DF  0823               	movf	___awmod@dividend+1,w
   999  01E0  00A1               	movwf	?___awmod+1
  1000  01E1  0822               	movf	___awmod@dividend,w
  1001  01E2  00A0               	movwf	?___awmod
  1002  01E3                     l347:
  1003  01E3  0008               	return
  1004  01E4                     __end_of___awmod:
  1005                           
  1006                           	psect	text3
  1007  00C1                     __ptext3:	
  1008 ;; *************** function ___awdiv *****************
  1009 ;; Defined at:
  1010 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;  divisor         2    0[BANK0 ] int 
  1013 ;;  dividend        2    2[BANK0 ] int 
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  quotient        2    7[BANK0 ] int 
  1016 ;;  sign            1    6[BANK0 ] unsigned char 
  1017 ;;  counter         1    5[BANK0 ] unsigned char 
  1018 ;; Return value:  Size  Location     Type
  1019 ;;                  2    0[BANK0 ] int 
  1020 ;; Registers used:
  1021 ;;		wreg, status,2, status,0
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1027 ;;      Params:         0       4       0       0       0
  1028 ;;      Locals:         0       4       0       0       0
  1029 ;;      Temps:          0       1       0       0       0
  1030 ;;      Totals:         0       9       0       0       0
  1031 ;;Total ram usage:        9 bytes
  1032 ;; Hardware stack levels used:    1
  1033 ;; Hardware stack levels required when called:    1
  1034 ;; This function calls:
  1035 ;;		Nothing
  1036 ;; This function is called by:
  1037 ;;		_main
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041                           
  1042                           ;psect for function ___awdiv
  1043  00C1                     ___awdiv:
  1044  00C1                     l1447:	
  1045                           ;incstack = 0
  1046                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1047                           
  1048  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  1049  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  1050  00C3  01A6               	clrf	___awdiv@sign
  1051  00C4                     l1449:
  1052  00C4  1FA1               	btfss	___awdiv@divisor+1,7
  1053  00C5  28C7               	goto	u431
  1054  00C6  28C8               	goto	u430
  1055  00C7                     u431:
  1056  00C7  28CF               	goto	l1455
  1057  00C8                     u430:
  1058  00C8                     l1451:
  1059  00C8  09A0               	comf	___awdiv@divisor,f
  1060  00C9  09A1               	comf	___awdiv@divisor+1,f
  1061  00CA  0AA0               	incf	___awdiv@divisor,f
  1062  00CB  1903               	skipnz
  1063  00CC  0AA1               	incf	___awdiv@divisor+1,f
  1064  00CD                     l1453:
  1065  00CD  01A6               	clrf	___awdiv@sign
  1066  00CE  0AA6               	incf	___awdiv@sign,f
  1067  00CF                     l1455:
  1068  00CF  1FA3               	btfss	___awdiv@dividend+1,7
  1069  00D0  28D2               	goto	u441
  1070  00D1  28D3               	goto	u440
  1071  00D2                     u441:
  1072  00D2  28DC               	goto	l1461
  1073  00D3                     u440:
  1074  00D3                     l1457:
  1075  00D3  09A2               	comf	___awdiv@dividend,f
  1076  00D4  09A3               	comf	___awdiv@dividend+1,f
  1077  00D5  0AA2               	incf	___awdiv@dividend,f
  1078  00D6  1903               	skipnz
  1079  00D7  0AA3               	incf	___awdiv@dividend+1,f
  1080  00D8                     l1459:
  1081  00D8  3001               	movlw	1
  1082  00D9  00A4               	movwf	??___awdiv
  1083  00DA  0824               	movf	??___awdiv,w
  1084  00DB  06A6               	xorwf	___awdiv@sign,f
  1085  00DC                     l1461:
  1086  00DC  01A7               	clrf	___awdiv@quotient
  1087  00DD  01A8               	clrf	___awdiv@quotient+1
  1088  00DE                     l1463:
  1089  00DE  0820               	movf	___awdiv@divisor,w
  1090  00DF  0421               	iorwf	___awdiv@divisor+1,w
  1091  00E0  1903               	btfsc	3,2
  1092  00E1  28E3               	goto	u451
  1093  00E2  28E4               	goto	u450
  1094  00E3                     u451:
  1095  00E3  291B               	goto	l1483
  1096  00E4                     u450:
  1097  00E4                     l1465:
  1098  00E4  01A5               	clrf	___awdiv@counter
  1099  00E5  0AA5               	incf	___awdiv@counter,f
  1100  00E6  28F2               	goto	l1471
  1101  00E7                     l1467:
  1102  00E7  3001               	movlw	1
  1103  00E8                     u465:
  1104  00E8  1003               	clrc
  1105  00E9  0DA0               	rlf	___awdiv@divisor,f
  1106  00EA  0DA1               	rlf	___awdiv@divisor+1,f
  1107  00EB  3EFF               	addlw	-1
  1108  00EC  1D03               	skipz
  1109  00ED  28E8               	goto	u465
  1110  00EE                     l1469:
  1111  00EE  3001               	movlw	1
  1112  00EF  00A4               	movwf	??___awdiv
  1113  00F0  0824               	movf	??___awdiv,w
  1114  00F1  07A5               	addwf	___awdiv@counter,f
  1115  00F2                     l1471:
  1116  00F2  1FA1               	btfss	___awdiv@divisor+1,7
  1117  00F3  28F5               	goto	u471
  1118  00F4  28F6               	goto	u470
  1119  00F5                     u471:
  1120  00F5  28E7               	goto	l1467
  1121  00F6                     u470:
  1122  00F6                     l1473:
  1123  00F6  3001               	movlw	1
  1124  00F7                     u485:
  1125  00F7  1003               	clrc
  1126  00F8  0DA7               	rlf	___awdiv@quotient,f
  1127  00F9  0DA8               	rlf	___awdiv@quotient+1,f
  1128  00FA  3EFF               	addlw	-1
  1129  00FB  1D03               	skipz
  1130  00FC  28F7               	goto	u485
  1131  00FD  0821               	movf	___awdiv@divisor+1,w
  1132  00FE  0223               	subwf	___awdiv@dividend+1,w
  1133  00FF  1D03               	skipz
  1134  0100  2903               	goto	u495
  1135  0101  0820               	movf	___awdiv@divisor,w
  1136  0102  0222               	subwf	___awdiv@dividend,w
  1137  0103                     u495:
  1138  0103  1C03               	skipc
  1139  0104  2906               	goto	u491
  1140  0105  2907               	goto	u490
  1141  0106                     u491:
  1142  0106  290E               	goto	l1479
  1143  0107                     u490:
  1144  0107                     l1475:
  1145  0107  0820               	movf	___awdiv@divisor,w
  1146  0108  02A2               	subwf	___awdiv@dividend,f
  1147  0109  0821               	movf	___awdiv@divisor+1,w
  1148  010A  1C03               	skipc
  1149  010B  03A3               	decf	___awdiv@dividend+1,f
  1150  010C  02A3               	subwf	___awdiv@dividend+1,f
  1151  010D                     l1477:
  1152  010D  1427               	bsf	___awdiv@quotient,0
  1153  010E                     l1479:
  1154  010E  3001               	movlw	1
  1155  010F                     u505:
  1156  010F  1003               	clrc
  1157  0110  0CA1               	rrf	___awdiv@divisor+1,f
  1158  0111  0CA0               	rrf	___awdiv@divisor,f
  1159  0112  3EFF               	addlw	-1
  1160  0113  1D03               	skipz
  1161  0114  290F               	goto	u505
  1162  0115                     l1481:
  1163  0115  3001               	movlw	1
  1164  0116  02A5               	subwf	___awdiv@counter,f
  1165  0117  1D03               	btfss	3,2
  1166  0118  291A               	goto	u511
  1167  0119  291B               	goto	u510
  1168  011A                     u511:
  1169  011A  28F6               	goto	l1473
  1170  011B                     u510:
  1171  011B                     l1483:
  1172  011B  0826               	movf	___awdiv@sign,w
  1173  011C  1903               	btfsc	3,2
  1174  011D  291F               	goto	u521
  1175  011E  2920               	goto	u520
  1176  011F                     u521:
  1177  011F  2925               	goto	l1487
  1178  0120                     u520:
  1179  0120                     l1485:
  1180  0120  09A7               	comf	___awdiv@quotient,f
  1181  0121  09A8               	comf	___awdiv@quotient+1,f
  1182  0122  0AA7               	incf	___awdiv@quotient,f
  1183  0123  1903               	skipnz
  1184  0124  0AA8               	incf	___awdiv@quotient+1,f
  1185  0125                     l1487:
  1186  0125  0828               	movf	___awdiv@quotient+1,w
  1187  0126  00A1               	movwf	?___awdiv+1
  1188  0127  0827               	movf	___awdiv@quotient,w
  1189  0128  00A0               	movwf	?___awdiv
  1190  0129                     l334:
  1191  0129  0008               	return
  1192  012A                     __end_of___awdiv:
  1193                           
  1194                           	psect	text4
  1195  01E4                     __ptext4:	
  1196 ;; *************** function _ISR *****************
  1197 ;; Defined at:
  1198 ;;		line 100 in file "main.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;		None
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;		None
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  1    wreg      void 
  1205 ;; Registers used:
  1206 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1212 ;;      Params:         0       0       0       0       0
  1213 ;;      Locals:         0       0       0       0       0
  1214 ;;      Temps:          5       0       0       0       0
  1215 ;;      Totals:         5       0       0       0       0
  1216 ;;Total ram usage:        5 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; This function calls:
  1219 ;;		Nothing
  1220 ;; This function is called by:
  1221 ;;		Interrupt level 1
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           
  1226                           ;psect for function _ISR
  1227  01E4                     _ISR:
  1228  01E4                     i1l875:
  1229                           
  1230                           ;main.c: 106:     if(RBIF == 1) {
  1231  01E4  1C0B               	btfss	11,0	;volatile
  1232  01E5  29E7               	goto	u20_21
  1233  01E6  29E8               	goto	u20_20
  1234  01E7                     u20_21:
  1235  01E7  29F9               	goto	i1l887
  1236  01E8                     u20_20:
  1237  01E8                     i1l877:
  1238                           
  1239                           ;main.c: 107:         if (PORTBbits.RB0 == 0) {
  1240  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1241  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1242  01EA  1806               	btfsc	6,0	;volatile
  1243  01EB  29ED               	goto	u21_21
  1244  01EC  29EE               	goto	u21_20
  1245  01ED                     u21_21:
  1246  01ED  29F2               	goto	i1l881
  1247  01EE                     u21_20:
  1248  01EE                     i1l879:
  1249                           
  1250                           ;main.c: 108:             PORTA++;
  1251  01EE  3001               	movlw	1
  1252  01EF  00F0               	movwf	??_ISR
  1253  01F0  0870               	movf	??_ISR,w
  1254  01F1  0785               	addwf	5,f	;volatile
  1255  01F2                     i1l881:
  1256                           
  1257                           ;main.c: 110:         if (PORTBbits.RB1 == 0) {
  1258  01F2  1886               	btfsc	6,1	;volatile
  1259  01F3  29F5               	goto	u22_21
  1260  01F4  29F6               	goto	u22_20
  1261  01F5                     u22_21:
  1262  01F5  29F8               	goto	i1l885
  1263  01F6                     u22_20:
  1264  01F6                     i1l883:
  1265                           
  1266                           ;main.c: 111:             PORTA--;
  1267  01F6  3001               	movlw	1
  1268  01F7  0285               	subwf	5,f	;volatile
  1269  01F8                     i1l885:
  1270                           
  1271                           ;main.c: 113:         INTCONbits.RBIF = 0;
  1272  01F8  100B               	bcf	11,0	;volatile
  1273  01F9                     i1l887:
  1274                           
  1275                           ;main.c: 116:     if (T0IF == 1) {
  1276  01F9  1D0B               	btfss	11,2	;volatile
  1277  01FA  29FC               	goto	u23_21
  1278  01FB  29FD               	goto	u23_20
  1279  01FC                     u23_21:
  1280  01FC  2A2A               	goto	i1l87
  1281  01FD                     u23_20:
  1282  01FD                     i1l889:
  1283                           
  1284                           ;main.c: 117:         TMR0 = 100;
  1285  01FD  3064               	movlw	100
  1286  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  1287  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  1288  0200  0081               	movwf	1	;volatile
  1289  0201                     i1l891:
  1290                           
  1291                           ;main.c: 118:         INTCONbits.T0IF = 0;
  1292  0201  110B               	bcf	11,2	;volatile
  1293                           
  1294                           ;main.c: 119:         switch(Disp_Sig) {
  1295  0202  2A17               	goto	i1l919
  1296  0203                     i1l893:
  1297                           
  1298                           ;main.c: 121:                 PORTD = 0;
  1299  0203  0188               	clrf	8	;volatile
  1300  0204                     i1l895:
  1301                           
  1302                           ;main.c: 122:                 PORTC = display_var[2];
  1303  0204  0877               	movf	_display_var+2,w
  1304  0205  0087               	movwf	7	;volatile
  1305  0206                     i1l897:
  1306                           
  1307                           ;main.c: 123:                 PORTDbits.RD0 = 1;
  1308  0206  1408               	bsf	8,0	;volatile
  1309  0207                     i1l899:
  1310                           
  1311                           ;main.c: 124:                 Disp_Sig++;
  1312  0207  3001               	movlw	1
  1313  0208  00F0               	movwf	??_ISR
  1314  0209  0870               	movf	??_ISR,w
  1315  020A  07F8               	addwf	_Disp_Sig,f
  1316                           
  1317                           ;main.c: 125:                 break;
  1318  020B  2A2A               	goto	i1l87
  1319  020C                     i1l901:
  1320                           
  1321                           ;main.c: 127:                 PORTD = 0;
  1322  020C  0188               	clrf	8	;volatile
  1323  020D                     i1l903:
  1324                           
  1325                           ;main.c: 128:                 PORTC = display_var[1];
  1326  020D  0876               	movf	_display_var+1,w
  1327  020E  0087               	movwf	7	;volatile
  1328  020F                     i1l905:
  1329                           
  1330                           ;main.c: 129:                 PORTDbits.RD1 = 1;
  1331  020F  1488               	bsf	8,1	;volatile
  1332  0210  2A07               	goto	i1l899
  1333  0211                     i1l909:
  1334                           
  1335                           ;main.c: 133:                 PORTD = 0;
  1336  0211  0188               	clrf	8	;volatile
  1337  0212                     i1l911:
  1338                           
  1339                           ;main.c: 134:                 PORTC = display_var[0];
  1340  0212  0875               	movf	_display_var,w
  1341  0213  0087               	movwf	7	;volatile
  1342  0214                     i1l913:
  1343                           
  1344                           ;main.c: 135:                 PORTDbits.RD2 = 1;
  1345  0214  1508               	bsf	8,2	;volatile
  1346  0215                     i1l915:
  1347                           
  1348                           ;main.c: 136:                 Disp_Sig = 0;
  1349  0215  01F8               	clrf	_Disp_Sig
  1350                           
  1351                           ;main.c: 137:                 break;
  1352  0216  2A2A               	goto	i1l87
  1353  0217                     i1l919:
  1354  0217  0878               	movf	_Disp_Sig,w
  1355  0218  00F0               	movwf	??_ISR
  1356  0219  01F1               	clrf	??_ISR+1
  1357                           
  1358                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1359                           ; Switch size 1, requested type "simple"
  1360                           ; Number of cases is 1, Range of values is 0 to 0
  1361                           ; switch strategies available:
  1362                           ; Name         Instructions Cycles
  1363                           ; simple_byte            4     3 (average)
  1364                           ; direct_byte           11     8 (fixed)
  1365                           ; jumptable            260     6 (fixed)
  1366                           ;	Chosen strategy is simple_byte
  1367  021A  0871               	movf	??_ISR+1,w
  1368  021B  3A00               	xorlw	0	; case 0
  1369  021C  1903               	skipnz
  1370  021D  2A1F               	goto	i1l1653
  1371  021E  2A2A               	goto	i1l87
  1372  021F                     i1l1653:
  1373                           
  1374                           ; Switch size 1, requested type "simple"
  1375                           ; Number of cases is 3, Range of values is 0 to 2
  1376                           ; switch strategies available:
  1377                           ; Name         Instructions Cycles
  1378                           ; simple_byte           10     6 (average)
  1379                           ; direct_byte           17     8 (fixed)
  1380                           ; jumptable            260     6 (fixed)
  1381                           ;	Chosen strategy is simple_byte
  1382  021F  0870               	movf	??_ISR,w
  1383  0220  3A00               	xorlw	0	; case 0
  1384  0221  1903               	skipnz
  1385  0222  2A03               	goto	i1l893
  1386  0223  3A01               	xorlw	1	; case 1
  1387  0224  1903               	skipnz
  1388  0225  2A0C               	goto	i1l901
  1389  0226  3A03               	xorlw	3	; case 2
  1390  0227  1903               	skipnz
  1391  0228  2A11               	goto	i1l909
  1392  0229  2A2A               	goto	i1l87
  1393  022A                     i1l87:
  1394  022A  0874               	movf	??_ISR+4,w
  1395  022B  008A               	movwf	10
  1396  022C  0873               	movf	??_ISR+3,w
  1397  022D  0084               	movwf	4
  1398  022E  0E72               	swapf	??_ISR+2,w
  1399  022F  0083               	movwf	3
  1400  0230  0EFE               	swapf	btemp,f
  1401  0231  0E7E               	swapf	btemp,w
  1402  0232  0009               	retfie
  1403  0233                     __end_of_ISR:
  1404  007E                     btemp	set	126	;btemp
  1405  007E                     wtemp0	set	126
  1406                           
  1407                           	psect	intentry
  1408  0004                     __pintentry:	
  1409                           ;incstack = 0
  1410                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0]
  1411                           
  1412  0004                     interrupt_function:
  1413  007E                     saved_w	set	btemp
  1414  0004  00FE               	movwf	btemp
  1415  0005  0E03               	swapf	3,w
  1416  0006  00F2               	movwf	??_ISR+2
  1417  0007  0804               	movf	4,w
  1418  0008  00F3               	movwf	??_ISR+3
  1419  0009  080A               	movf	10,w
  1420  000A  00F4               	movwf	??_ISR+4
  1421  000B  120A  118A  29E4   	ljmp	_ISR
  1422                           
  1423                           	psect	config
  1424                           
  1425                           ;Config register CONFIG1 @ 0x2007
  1426                           ;	Oscillator Selection bits
  1427                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  1428                           ;	Watchdog Timer Enable bit
  1429                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1430                           ;	Power-up Timer Enable bit
  1431                           ;	PWRTE = OFF, PWRT disabled
  1432                           ;	RE3/MCLR pin function select bit
  1433                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1434                           ;	Code Protection bit
  1435                           ;	CP = OFF, Program memory code protection is disabled
  1436                           ;	Data Code Protection bit
  1437                           ;	CPD = OFF, Data memory code protection is disabled
  1438                           ;	Brown Out Reset Selection bits
  1439                           ;	BOREN = OFF, BOR disabled
  1440                           ;	Internal External Switchover bit
  1441                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1442                           ;	Fail-Safe Clock Monitor Enabled bit
  1443                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1444                           ;	Low Voltage Programming Enable bit
  1445                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1446                           ;	In-Circuit Debugger Mode bit
  1447                           ;	DEBUG = 0x1, unprogrammed default
  1448  2007                     	org	8199
  1449  2007  20D6               	dw	8406
  1450                           
  1451                           ;Config register CONFIG2 @ 0x2008
  1452                           ;	Brown-out Reset Selection bit
  1453                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1454                           ;	Flash Program Memory Self Write Enable bits
  1455                           ;	WRT = OFF, Write protection off
  1456  2008                     	org	8200
  1457  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     12      15
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1629
                                              9 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                          _tabla_seg
 ---------------------------------------------------------------------------------
 (1) _tabla_seg                                            3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     793
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     805
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
   _tabla_seg

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      19       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C       F       5       18.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      19      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sun Apr 18 20:03:03 2021

                     l57 0188             ___awdiv@sign 0026                      l334 0129  
                    l347 01E3                      u510 011B                      u430 00C8  
                    u511 011A                      u431 00C7                      u520 0120  
                    u440 00D3                      u600 01D5                      u521 011F  
                    u505 010F                      u441 00D2                      u601 01D4  
                    u450 00E4                      u610 01DA                      u530 0190  
                    u451 00E3                      u611 01D9                      u531 018F  
                    u540 019B                      _ISR 01E4                      u541 019A  
                    u470 00F6                      u550 01A6                      u471 00F5  
                    u551 01A5                      u465 00E8                      u490 0107  
                    u570 01B8                      u491 0106                      u571 01B7  
                    u580 01C2                      u485 00F7                      u581 01C1  
                    u565 01AA                      u495 0103                      u585 01BE  
                    u595 01C9                      _dec 002D                      fsr0 0004  
           ___awmod@sign 0026                     ?_ISR 0070                     l1401 0142  
                   l1501 019B                     l1413 0146                     l1341 012E  
                   l1511 01B4                     l1503 01A0                     l1431 014C  
                   l1407 0144                     l1513 01B8                     l1505 01A6  
                   l1521 01D5                     l1425 014A                     l1353 0132  
                   l1451 00C8                     l1523 01DA                     l1515 01C2  
                   l1507 01A9                     l1419 0148                     l1371 0138  
                   l1347 0130                     l1339 012D                     l1531 001F  
                   l1461 00DC                     l1453 00CD                     l1525 01DF  
                   l1517 01C8                     l1509 01B0                     l1365 0136  
                   l1541 002A                     l1533 0023                     l1471 00F2  
                   l1463 00DE                     l1455 00CF                     l1447 00C1  
                   l1519 01CF                     l1383 013C                     l1359 0134  
                   l1439 014E                     l1551 0031                     l1543 002B  
                   l1535 0027                     l1481 0115                     l1473 00F6  
                   l1465 00E4                     l1457 00D3                     l1449 00C4  
                   l1377 013A                     l1561 0038                     l1553 0032  
                   l1545 002C                     l1537 0028                     l1529 0019  
                   l1475 0107                     l1467 00E7                     l1483 011B  
                   l1459 00D8                     l1491 0189                     l1651 0156  
                   l1395 0140                     l1571 0041                     l1563 0039  
                   l1555 0033                     l1547 002D                     l1539 0029  
                   l1485 0120                     l1477 010D                     l1469 00EE  
                   l1493 018C                     l1389 013E                     l1581 0070  
                   l1573 0042                     l1565 003A                     l1557 0036  
                   l1549 0030                     l1487 0125                     l1479 010E  
                   l1495 0190                     l1583 0086                     l1575 0043  
                   l1567 003B                     l1559 0037                     l1497 0195  
                   l1585 009C                     l1577 0044                     l1569 0040  
                   l1499 0197                     l1587 00A7                     l1579 005A  
                   l1589 00B2                     _T0IF 005A                     _RBIF 0058  
                   i1l87 022A                     _TMR0 0001                     _cent 002E  
                   _main 0019                     _unit 002C                     btemp 007E  
                   start 000E                    ??_ISR 0070                    ?_main 0070  
        __end_of___awdiv 012A          __end_of___awmod 01E4                    _ANSEL 0188  
        ___awdiv@divisor 0020                    i1l901 020C                    i1l911 0212  
                  i1l903 020D                    i1l913 0214                    i1l905 020F  
                  i1l915 0215                    i1l909 0211                    i1l919 0217  
                  i1l881 01F2                    i1l891 0201                    i1l883 01F6  
                  i1l875 01E4                    i1l893 0203                    i1l885 01F8  
                  i1l877 01E8                    i1l895 0204                    i1l879 01EE  
                  i1l887 01F9                    i1l897 0206                    i1l889 01FD  
                  i1l899 0207          ___awdiv@counter 0025                    u20_20 01E8  
                  u20_21 01E7                    u21_20 01EE                    u21_21 01ED  
                  u22_20 01F6                    u22_21 01F5                    u23_20 01FD  
                  u23_21 01FC                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _PORTD 0008                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0011             __end_of_main 00C1                   ??_main 0029  
             _Minus_cent 0079         ___awdiv@dividend 0022                   _ANSELH 0189  
                 i1l1653 021F           tabla_seg@valor 0022                ??___awdiv 0024  
              ??___awmod 0024         ___awdiv@quotient 0027          ___awmod@divisor 0020  
        ___awmod@counter 0025                   saved_w 007E  __end_of__initialization 0015  
         __pcstackCOMMON 0070           _OPTION_REGbits 0081               __pnvCOMMON 0079  
     __size_of_tabla_seg 005F               __pmaintext 0019               __pintentry 0004  
                ___awdiv 00C1                  ___awmod 0189                  __ptext1 012A  
                __ptext2 0189                  __ptext3 00C1                  __ptext4 01E4  
           __size_of_ISR 004F         ___awmod@dividend 0022        __end_of_tabla_seg 0189  
   end_of_initialization 0015                _PORTBbits 0006                _PORTDbits 0008  
    start_initialization 0011              __end_of_ISR 0233              __pbssCOMMON 0075  
              ___latbits 0002            __pcstackBANK0 0020                __pnvBANK0 002C  
               ?___awdiv 0020                 ?___awmod 0020                _tabla_seg 012A  
      interrupt_function 0004                 _IOCBbits 0096              _display_var 0075  
               _WPUBbits 0095                 _Disp_Sig 0078               ?_tabla_seg 0070  
       __size_of___awdiv 0069         __size_of___awmod 005B            __size_of_main 00A8  
             _INTCONbits 000B                 intlevel1 0000              ??_tabla_seg 0020  
             _OSCCONbits 008F  
